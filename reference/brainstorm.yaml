openapi: 3.1.0
info:
  title: brainstorm
  version: '1.0'
  summary: API for the Brainstorm app
  contact:
    name: Alex Petrean
    email: alex.petrean@stud.ubbcluj.ro
  description: Rest API
servers:
  - url: 'http://localhost:5000/api'
  - url: 'http://localhost:5001/api'
    description: ''
paths:
  /AppVersion/version:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionCode'
      operationId: get-AppVersion-version
      description: Retrieves the version of the app
  /Auth/login:
    parameters: []
    post:
      summary: ''
      operationId: post-auth-login
      responses:
        '200':
          description: OK
      description: ''
      requestBody:
        $ref: '#/components/requestBodies/Login'
  /Auth/signup:
    post:
      summary: ''
      operationId: post-auth-signup
      responses:
        '200':
          description: OK
      description: ''
      security: []
      requestBody:
        $ref: '#/components/requestBodies/Signup'
    parameters: []
  '/User/{userId}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: get-user
      parameters: []
    put:
      summary: ''
      operationId: put-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      parameters:
        - schema:
            type: string
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  /Org:
    post:
      summary: ''
      operationId: post-org
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      requestBody:
        $ref: '#/components/requestBodies/Organization'
    parameters: []
  '/Org/{orgId}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      operationId: get-org
    put:
      summary: ''
      operationId: put-org
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
      requestBody:
        $ref: '#/components/requestBodies/Organization'
    delete:
      summary: ''
      operationId: delete-org
      responses:
        '202':
          description: Accepted
      description: ''
    parameters:
      - schema:
          type: string
        name: orgId
        in: path
        required: true
  '/Org/{orgId}/users':
    parameters:
      - schema:
          type: string
        name: orgId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-org-orgId-users
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
  '/Org/{orgId}/user/{userId}':
    parameters:
      - schema:
          type: string
        name: orgId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '204':
          description: No Content
      operationId: get-org-rgId-user-userId
    post:
      summary: ''
      operationId: post-org-orgId-user-userId
      responses:
        '201':
          description: Created
    delete:
      summary: ''
      operationId: delete-org-orgId-user-userId
      responses:
        '202':
          description: Accepted
  '/Org/{orgId}/project':
    parameters:
      - schema:
          type: string
        name: orgId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-org-orgId-project
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
  '/Org/{orgId}/projects':
    parameters:
      - schema:
          type: string
        name: orgId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectId'
      operationId: get-org-orgId-projects
  '/Org/{orgId}/project/{projectId}':
    parameters:
      - schema:
          type: string
        name: orgId
        in: path
        required: true
      - schema:
          type: string
        name: projectId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '204':
          description: No Content
      operationId: get-Org-orgId-project-projectId
  '/Project/{projectId}':
    parameters:
      - schema:
          type: string
        name: projectId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      operationId: get-org-orgId-project-projectId
    put:
      summary: ''
      operationId: put-Org-orgId-project-projectId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      requestBody:
        $ref: '#/components/requestBodies/Project'
    delete:
      summary: ''
      operationId: delete-Org-orgId-project-projectId
      responses:
        '202':
          description: Accepted
  '/Project/{projectId}/topics':
    parameters:
      - schema:
          type: string
        name: projectId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopicSummary'
      operationId: get-Project-projectId-topics
  '/Project/{projectId}/topic':
    parameters:
      - schema:
          type: string
        name: projectId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-Project-projectId-topic
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      requestBody:
        $ref: '#/components/requestBodies/Topic'
  '/Topic/{topicId}':
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-Topic-topicId
    parameters:
      - schema:
          type: string
        name: topicId
        in: path
        required: true
components:
  schemas:
    VersionCode:
      title: VersionCode
      type: object
      examples:
        - version: '1.5'
      description: The version of the app.
      properties:
        version:
          type: string
          pattern: '[0-9]\.[0-9]'
          readOnly: true
      required:
        - version
      x-internal: false
    UserId:
      type: string
      title: UserId
      format: uuid
      readOnly: true
    User:
      title: User
      type: object
      properties:
        id:
          type: string
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          readOnly: true
        profilePic:
          oneOf:
            - type: string
              properties: {}
            - type: 'null'
              properties: {}
      required:
        - id
        - firstName
        - lastName
        - email
        - profilePic
    OrgId:
      type: string
      title: OrgId
      format: uuid
      readOnly: true
    Organization:
      title: Organization
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrgId'
        name:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserId'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectId'
        logo:
          oneOf:
            - type: string
              properties: {}
            - properties: {}
              type: 'null'
      required:
        - id
        - name
        - users
        - projects
    ProjectId:
      type: string
      title: ProjectId
      format: uuid
      readOnly: true
    ProjectSummary:
      title: ProjectSummary
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
        name:
          type: string
        topics:
          type: array
          items:
            $ref: '#/components/schemas/TopicSummary'
          readOnly: true
    Project:
      title: Project
      allOf:
        - $ref: '#/components/schemas/ProjectSummary'
        - type: object
    TopicId:
      type: string
      title: TopicId
      format: uuid
      readOnly: true
    TopicSummary:
      title: TopicSummary
      type: object
      properties:
        id:
          $ref: '#/components/schemas/TopicId'
        title:
          type: string
        proposer:
          $ref: '#/components/schemas/UserId'
    Topic:
      title: Topic
      allOf:
        - $ref: '#/components/schemas/TopicSummary'
        - type: object
          properties:
            iterations:
              type: array
              items:
                $ref: '#/components/schemas/IterationId'
            creationDate:
              type: string
              format: date-time
    IterationId:
      type: string
      title: IterationId
      format: uuid
      readOnly: true
    Iteration:
      title: Iteration
      type: object
      properties:
        id:
          $ref: '#/components/schemas/IterationId'
        goal:
          type: string
        description:
          type: string
        files:
          type: array
          items:
            type: string
        comments:
          $ref: '#/components/schemas/CommentsSummary'
        deadline:
          type: string
          format: date-time
        timeline:
          $ref: '#/components/schemas/Timeline'
    CommentSectionId:
      type: string
      title: Comment
      format: uuid
      readOnly: true
    CommentSection:
      title: CommentSection
      type: object
      properties:
        id:
          type: string
    CommentId:
      type: string
      title: CommentId
      format: uuid
      readOnly: true
    Comment:
      title: Comment
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CommentId'
    CommentsSummary:
      title: CommentsSummary
      type: object
      properties:
        lastActiveUsers:
          type: array
          maxItems: 5
          uniqueItems: true
          items:
            $ref: '#/components/schemas/UserId'
        commentsAmount:
          type: number
        section:
          $ref: '#/components/schemas/CommentSectionId'
    Timeline:
      title: Proposal
      type: object
      properties:
        id:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Proposal'
              - $ref: '#/components/schemas/Event'
    ProposalId:
      type: string
      title: ProposalId
      format: uuid
      readOnly: true
    Proposal:
      title: Proposal
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ProposalId'
        description:
          type: string
        proposer:
          $ref: '#/components/schemas/UserId'
        creationDate:
          type: string
          format: date-time
        comments:
          $ref: '#/components/schemas/CommentsSummary'
        rating:
          $ref: '#/components/schemas/Rating'
    EventId:
      type: string
      title: EventId
      format: uuid
      example: cd296f26-16c5-43b4-9f4f-cf30c9f6d6e4
    Event:
      title: Event
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EventId'
    Rating:
      title: Rating
      type: object
      properties:
        '1':
          type: number
          description: Angry Emonji
        '2':
          type: number
          description: Sad Emoji
        '3':
          type: number
          description: Eh emoji
        '4':
          type: number
          description: Happy Emoji
        '5':
          type: number
          description: Love Emoji
        yourVote:
          type: array
          uniqueItems: true
          maxItems: 5
          description: Emojis you have clicked on
          items:
            type: number
            maximum: 5
            minimum: 1
        average:
          type: number
          description: Median average of all ratings
          minimum: 0
          maximum: 5
          format: float
          readOnly: true
  securitySchemes:
    simpleauth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          refreshUrl: ''
          scopes: {}
  requestBodies:
    Signup:
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              password:
                type: string
            required:
              - firstName
              - lastName
              - email
              - password
          examples: {}
    Login:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
    Organization:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Organization'
    UserId:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserId'
    Project:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Project'
    Topic:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Topic'
security:
  - simpleauth: []
